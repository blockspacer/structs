// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/cassandra/cassandra_internal.proto

#ifndef PROTOBUF_structs_2fcassandra_2fcassandra_5finternal_2eproto__INCLUDED
#define PROTOBUF_structs_2fcassandra_2fcassandra_5finternal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_structs_2fcassandra_2fcassandra_5finternal_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCassandraInternalFieldImpl();
void InitDefaultsCassandraInternalField();
void InitDefaultsCassandraInternalMessageImpl();
void InitDefaultsCassandraInternalMessage();
void InitDefaultsCassandraInternalMessagesImpl();
void InitDefaultsCassandraInternalMessages();
inline void InitDefaults() {
  InitDefaultsCassandraInternalField();
  InitDefaultsCassandraInternalMessage();
  InitDefaultsCassandraInternalMessages();
}
}  // namespace protobuf_structs_2fcassandra_2fcassandra_5finternal_2eproto
namespace structs {
class CassandraInternalField;
class CassandraInternalFieldDefaultTypeInternal;
extern CassandraInternalFieldDefaultTypeInternal _CassandraInternalField_default_instance_;
class CassandraInternalMessage;
class CassandraInternalMessageDefaultTypeInternal;
extern CassandraInternalMessageDefaultTypeInternal _CassandraInternalMessage_default_instance_;
class CassandraInternalMessages;
class CassandraInternalMessagesDefaultTypeInternal;
extern CassandraInternalMessagesDefaultTypeInternal _CassandraInternalMessages_default_instance_;
}  // namespace structs
namespace structs {

// ===================================================================

class CassandraInternalField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:structs.CassandraInternalField) */ {
 public:
  CassandraInternalField();
  virtual ~CassandraInternalField();

  CassandraInternalField(const CassandraInternalField& from);

  inline CassandraInternalField& operator=(const CassandraInternalField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CassandraInternalField(CassandraInternalField&& from) noexcept
    : CassandraInternalField() {
    *this = ::std::move(from);
  }

  inline CassandraInternalField& operator=(CassandraInternalField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CassandraInternalField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CassandraInternalField* internal_default_instance() {
    return reinterpret_cast<const CassandraInternalField*>(
               &_CassandraInternalField_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CassandraInternalField* other);
  friend void swap(CassandraInternalField& a, CassandraInternalField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CassandraInternalField* New() const PROTOBUF_FINAL { return New(NULL); }

  CassandraInternalField* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CassandraInternalField& from);
  void MergeFrom(const CassandraInternalField& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CassandraInternalField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string cassandra_type = 2;
  void clear_cassandra_type();
  static const int kCassandraTypeFieldNumber = 2;
  const ::std::string& cassandra_type() const;
  void set_cassandra_type(const ::std::string& value);
  #if LANG_CXX11
  void set_cassandra_type(::std::string&& value);
  #endif
  void set_cassandra_type(const char* value);
  void set_cassandra_type(const char* value, size_t size);
  ::std::string* mutable_cassandra_type();
  ::std::string* release_cassandra_type();
  void set_allocated_cassandra_type(::std::string* cassandra_type);

  // @@protoc_insertion_point(class_scope:structs.CassandraInternalField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr cassandra_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_structs_2fcassandra_2fcassandra_5finternal_2eproto::TableStruct;
  friend void ::protobuf_structs_2fcassandra_2fcassandra_5finternal_2eproto::InitDefaultsCassandraInternalFieldImpl();
};
// -------------------------------------------------------------------

class CassandraInternalMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:structs.CassandraInternalMessage) */ {
 public:
  CassandraInternalMessage();
  virtual ~CassandraInternalMessage();

  CassandraInternalMessage(const CassandraInternalMessage& from);

  inline CassandraInternalMessage& operator=(const CassandraInternalMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CassandraInternalMessage(CassandraInternalMessage&& from) noexcept
    : CassandraInternalMessage() {
    *this = ::std::move(from);
  }

  inline CassandraInternalMessage& operator=(CassandraInternalMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CassandraInternalMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CassandraInternalMessage* internal_default_instance() {
    return reinterpret_cast<const CassandraInternalMessage*>(
               &_CassandraInternalMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CassandraInternalMessage* other);
  friend void swap(CassandraInternalMessage& a, CassandraInternalMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CassandraInternalMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CassandraInternalMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CassandraInternalMessage& from);
  void MergeFrom(const CassandraInternalMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CassandraInternalMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .structs.CassandraInternalField fields = 2;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 2;
  const ::structs::CassandraInternalField& fields(int index) const;
  ::structs::CassandraInternalField* mutable_fields(int index);
  ::structs::CassandraInternalField* add_fields();
  ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalField >*
      mutable_fields();
  const ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalField >&
      fields() const;

  // repeated .structs.CassandraInternalField id_fields = 3;
  int id_fields_size() const;
  void clear_id_fields();
  static const int kIdFieldsFieldNumber = 3;
  const ::structs::CassandraInternalField& id_fields(int index) const;
  ::structs::CassandraInternalField* mutable_id_fields(int index);
  ::structs::CassandraInternalField* add_id_fields();
  ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalField >*
      mutable_id_fields();
  const ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalField >&
      id_fields() const;

  // repeated string ids = 7;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 7;
  const ::std::string& ids(int index) const;
  ::std::string* mutable_ids(int index);
  void set_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ids(int index, ::std::string&& value);
  #endif
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  ::std::string* add_ids();
  void add_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_ids(::std::string&& value);
  #endif
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ids();

  // string table_name = 1;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // string pkg = 4;
  void clear_pkg();
  static const int kPkgFieldNumber = 4;
  const ::std::string& pkg() const;
  void set_pkg(const ::std::string& value);
  #if LANG_CXX11
  void set_pkg(::std::string&& value);
  #endif
  void set_pkg(const char* value);
  void set_pkg(const char* value, size_t size);
  ::std::string* mutable_pkg();
  ::std::string* release_pkg();
  void set_allocated_pkg(::std::string* pkg);

  // string compaction_strategy = 5;
  void clear_compaction_strategy();
  static const int kCompactionStrategyFieldNumber = 5;
  const ::std::string& compaction_strategy() const;
  void set_compaction_strategy(const ::std::string& value);
  #if LANG_CXX11
  void set_compaction_strategy(::std::string&& value);
  #endif
  void set_compaction_strategy(const char* value);
  void set_compaction_strategy(const char* value, size_t size);
  ::std::string* mutable_compaction_strategy();
  ::std::string* release_compaction_strategy();
  void set_allocated_compaction_strategy(::std::string* compaction_strategy);

  // string compression_strategy = 6;
  void clear_compression_strategy();
  static const int kCompressionStrategyFieldNumber = 6;
  const ::std::string& compression_strategy() const;
  void set_compression_strategy(const ::std::string& value);
  #if LANG_CXX11
  void set_compression_strategy(::std::string&& value);
  #endif
  void set_compression_strategy(const char* value);
  void set_compression_strategy(const char* value, size_t size);
  ::std::string* mutable_compression_strategy();
  ::std::string* release_compression_strategy();
  void set_allocated_compression_strategy(::std::string* compression_strategy);

  // string java_package = 8;
  void clear_java_package();
  static const int kJavaPackageFieldNumber = 8;
  const ::std::string& java_package() const;
  void set_java_package(const ::std::string& value);
  #if LANG_CXX11
  void set_java_package(::std::string&& value);
  #endif
  void set_java_package(const char* value);
  void set_java_package(const char* value, size_t size);
  ::std::string* mutable_java_package();
  ::std::string* release_java_package();
  void set_allocated_java_package(::std::string* java_package);

  // string java_class = 9;
  void clear_java_class();
  static const int kJavaClassFieldNumber = 9;
  const ::std::string& java_class() const;
  void set_java_class(const ::std::string& value);
  #if LANG_CXX11
  void set_java_class(::std::string&& value);
  #endif
  void set_java_class(const char* value);
  void set_java_class(const char* value, size_t size);
  ::std::string* mutable_java_class();
  ::std::string* release_java_class();
  void set_allocated_java_class(::std::string* java_class);

  // @@protoc_insertion_point(class_scope:structs.CassandraInternalMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalField > fields_;
  ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalField > id_fields_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ids_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::internal::ArenaStringPtr pkg_;
  ::google::protobuf::internal::ArenaStringPtr compaction_strategy_;
  ::google::protobuf::internal::ArenaStringPtr compression_strategy_;
  ::google::protobuf::internal::ArenaStringPtr java_package_;
  ::google::protobuf::internal::ArenaStringPtr java_class_;
  mutable int _cached_size_;
  friend struct ::protobuf_structs_2fcassandra_2fcassandra_5finternal_2eproto::TableStruct;
  friend void ::protobuf_structs_2fcassandra_2fcassandra_5finternal_2eproto::InitDefaultsCassandraInternalMessageImpl();
};
// -------------------------------------------------------------------

class CassandraInternalMessages : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:structs.CassandraInternalMessages) */ {
 public:
  CassandraInternalMessages();
  virtual ~CassandraInternalMessages();

  CassandraInternalMessages(const CassandraInternalMessages& from);

  inline CassandraInternalMessages& operator=(const CassandraInternalMessages& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CassandraInternalMessages(CassandraInternalMessages&& from) noexcept
    : CassandraInternalMessages() {
    *this = ::std::move(from);
  }

  inline CassandraInternalMessages& operator=(CassandraInternalMessages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CassandraInternalMessages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CassandraInternalMessages* internal_default_instance() {
    return reinterpret_cast<const CassandraInternalMessages*>(
               &_CassandraInternalMessages_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CassandraInternalMessages* other);
  friend void swap(CassandraInternalMessages& a, CassandraInternalMessages& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CassandraInternalMessages* New() const PROTOBUF_FINAL { return New(NULL); }

  CassandraInternalMessages* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CassandraInternalMessages& from);
  void MergeFrom(const CassandraInternalMessages& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CassandraInternalMessages* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .structs.CassandraInternalMessage messages = 1;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  const ::structs::CassandraInternalMessage& messages(int index) const;
  ::structs::CassandraInternalMessage* mutable_messages(int index);
  ::structs::CassandraInternalMessage* add_messages();
  ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalMessage >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalMessage >&
      messages() const;

  // @@protoc_insertion_point(class_scope:structs.CassandraInternalMessages)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalMessage > messages_;
  mutable int _cached_size_;
  friend struct ::protobuf_structs_2fcassandra_2fcassandra_5finternal_2eproto::TableStruct;
  friend void ::protobuf_structs_2fcassandra_2fcassandra_5finternal_2eproto::InitDefaultsCassandraInternalMessagesImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CassandraInternalField

// string name = 1;
inline void CassandraInternalField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraInternalField::name() const {
  // @@protoc_insertion_point(field_get:structs.CassandraInternalField.name)
  return name_.GetNoArena();
}
inline void CassandraInternalField::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraInternalField.name)
}
#if LANG_CXX11
inline void CassandraInternalField::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraInternalField.name)
}
#endif
inline void CassandraInternalField::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraInternalField.name)
}
inline void CassandraInternalField::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraInternalField.name)
}
inline ::std::string* CassandraInternalField::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraInternalField.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraInternalField::release_name() {
  // @@protoc_insertion_point(field_release:structs.CassandraInternalField.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraInternalField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraInternalField.name)
}

// string cassandra_type = 2;
inline void CassandraInternalField::clear_cassandra_type() {
  cassandra_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraInternalField::cassandra_type() const {
  // @@protoc_insertion_point(field_get:structs.CassandraInternalField.cassandra_type)
  return cassandra_type_.GetNoArena();
}
inline void CassandraInternalField::set_cassandra_type(const ::std::string& value) {
  
  cassandra_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraInternalField.cassandra_type)
}
#if LANG_CXX11
inline void CassandraInternalField::set_cassandra_type(::std::string&& value) {
  
  cassandra_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraInternalField.cassandra_type)
}
#endif
inline void CassandraInternalField::set_cassandra_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cassandra_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraInternalField.cassandra_type)
}
inline void CassandraInternalField::set_cassandra_type(const char* value, size_t size) {
  
  cassandra_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraInternalField.cassandra_type)
}
inline ::std::string* CassandraInternalField::mutable_cassandra_type() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraInternalField.cassandra_type)
  return cassandra_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraInternalField::release_cassandra_type() {
  // @@protoc_insertion_point(field_release:structs.CassandraInternalField.cassandra_type)
  
  return cassandra_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraInternalField::set_allocated_cassandra_type(::std::string* cassandra_type) {
  if (cassandra_type != NULL) {
    
  } else {
    
  }
  cassandra_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cassandra_type);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraInternalField.cassandra_type)
}

// -------------------------------------------------------------------

// CassandraInternalMessage

// string table_name = 1;
inline void CassandraInternalMessage::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraInternalMessage::table_name() const {
  // @@protoc_insertion_point(field_get:structs.CassandraInternalMessage.table_name)
  return table_name_.GetNoArena();
}
inline void CassandraInternalMessage::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraInternalMessage.table_name)
}
#if LANG_CXX11
inline void CassandraInternalMessage::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraInternalMessage.table_name)
}
#endif
inline void CassandraInternalMessage::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraInternalMessage.table_name)
}
inline void CassandraInternalMessage::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraInternalMessage.table_name)
}
inline ::std::string* CassandraInternalMessage::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraInternalMessage.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraInternalMessage::release_table_name() {
  // @@protoc_insertion_point(field_release:structs.CassandraInternalMessage.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraInternalMessage::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraInternalMessage.table_name)
}

// repeated .structs.CassandraInternalField fields = 2;
inline int CassandraInternalMessage::fields_size() const {
  return fields_.size();
}
inline void CassandraInternalMessage::clear_fields() {
  fields_.Clear();
}
inline const ::structs::CassandraInternalField& CassandraInternalMessage::fields(int index) const {
  // @@protoc_insertion_point(field_get:structs.CassandraInternalMessage.fields)
  return fields_.Get(index);
}
inline ::structs::CassandraInternalField* CassandraInternalMessage::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:structs.CassandraInternalMessage.fields)
  return fields_.Mutable(index);
}
inline ::structs::CassandraInternalField* CassandraInternalMessage::add_fields() {
  // @@protoc_insertion_point(field_add:structs.CassandraInternalMessage.fields)
  return fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalField >*
CassandraInternalMessage::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:structs.CassandraInternalMessage.fields)
  return &fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalField >&
CassandraInternalMessage::fields() const {
  // @@protoc_insertion_point(field_list:structs.CassandraInternalMessage.fields)
  return fields_;
}

// repeated .structs.CassandraInternalField id_fields = 3;
inline int CassandraInternalMessage::id_fields_size() const {
  return id_fields_.size();
}
inline void CassandraInternalMessage::clear_id_fields() {
  id_fields_.Clear();
}
inline const ::structs::CassandraInternalField& CassandraInternalMessage::id_fields(int index) const {
  // @@protoc_insertion_point(field_get:structs.CassandraInternalMessage.id_fields)
  return id_fields_.Get(index);
}
inline ::structs::CassandraInternalField* CassandraInternalMessage::mutable_id_fields(int index) {
  // @@protoc_insertion_point(field_mutable:structs.CassandraInternalMessage.id_fields)
  return id_fields_.Mutable(index);
}
inline ::structs::CassandraInternalField* CassandraInternalMessage::add_id_fields() {
  // @@protoc_insertion_point(field_add:structs.CassandraInternalMessage.id_fields)
  return id_fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalField >*
CassandraInternalMessage::mutable_id_fields() {
  // @@protoc_insertion_point(field_mutable_list:structs.CassandraInternalMessage.id_fields)
  return &id_fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalField >&
CassandraInternalMessage::id_fields() const {
  // @@protoc_insertion_point(field_list:structs.CassandraInternalMessage.id_fields)
  return id_fields_;
}

// string pkg = 4;
inline void CassandraInternalMessage::clear_pkg() {
  pkg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraInternalMessage::pkg() const {
  // @@protoc_insertion_point(field_get:structs.CassandraInternalMessage.pkg)
  return pkg_.GetNoArena();
}
inline void CassandraInternalMessage::set_pkg(const ::std::string& value) {
  
  pkg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraInternalMessage.pkg)
}
#if LANG_CXX11
inline void CassandraInternalMessage::set_pkg(::std::string&& value) {
  
  pkg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraInternalMessage.pkg)
}
#endif
inline void CassandraInternalMessage::set_pkg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pkg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraInternalMessage.pkg)
}
inline void CassandraInternalMessage::set_pkg(const char* value, size_t size) {
  
  pkg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraInternalMessage.pkg)
}
inline ::std::string* CassandraInternalMessage::mutable_pkg() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraInternalMessage.pkg)
  return pkg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraInternalMessage::release_pkg() {
  // @@protoc_insertion_point(field_release:structs.CassandraInternalMessage.pkg)
  
  return pkg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraInternalMessage::set_allocated_pkg(::std::string* pkg) {
  if (pkg != NULL) {
    
  } else {
    
  }
  pkg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pkg);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraInternalMessage.pkg)
}

// string compaction_strategy = 5;
inline void CassandraInternalMessage::clear_compaction_strategy() {
  compaction_strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraInternalMessage::compaction_strategy() const {
  // @@protoc_insertion_point(field_get:structs.CassandraInternalMessage.compaction_strategy)
  return compaction_strategy_.GetNoArena();
}
inline void CassandraInternalMessage::set_compaction_strategy(const ::std::string& value) {
  
  compaction_strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraInternalMessage.compaction_strategy)
}
#if LANG_CXX11
inline void CassandraInternalMessage::set_compaction_strategy(::std::string&& value) {
  
  compaction_strategy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraInternalMessage.compaction_strategy)
}
#endif
inline void CassandraInternalMessage::set_compaction_strategy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compaction_strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraInternalMessage.compaction_strategy)
}
inline void CassandraInternalMessage::set_compaction_strategy(const char* value, size_t size) {
  
  compaction_strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraInternalMessage.compaction_strategy)
}
inline ::std::string* CassandraInternalMessage::mutable_compaction_strategy() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraInternalMessage.compaction_strategy)
  return compaction_strategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraInternalMessage::release_compaction_strategy() {
  // @@protoc_insertion_point(field_release:structs.CassandraInternalMessage.compaction_strategy)
  
  return compaction_strategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraInternalMessage::set_allocated_compaction_strategy(::std::string* compaction_strategy) {
  if (compaction_strategy != NULL) {
    
  } else {
    
  }
  compaction_strategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compaction_strategy);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraInternalMessage.compaction_strategy)
}

// string compression_strategy = 6;
inline void CassandraInternalMessage::clear_compression_strategy() {
  compression_strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraInternalMessage::compression_strategy() const {
  // @@protoc_insertion_point(field_get:structs.CassandraInternalMessage.compression_strategy)
  return compression_strategy_.GetNoArena();
}
inline void CassandraInternalMessage::set_compression_strategy(const ::std::string& value) {
  
  compression_strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraInternalMessage.compression_strategy)
}
#if LANG_CXX11
inline void CassandraInternalMessage::set_compression_strategy(::std::string&& value) {
  
  compression_strategy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraInternalMessage.compression_strategy)
}
#endif
inline void CassandraInternalMessage::set_compression_strategy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compression_strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraInternalMessage.compression_strategy)
}
inline void CassandraInternalMessage::set_compression_strategy(const char* value, size_t size) {
  
  compression_strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraInternalMessage.compression_strategy)
}
inline ::std::string* CassandraInternalMessage::mutable_compression_strategy() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraInternalMessage.compression_strategy)
  return compression_strategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraInternalMessage::release_compression_strategy() {
  // @@protoc_insertion_point(field_release:structs.CassandraInternalMessage.compression_strategy)
  
  return compression_strategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraInternalMessage::set_allocated_compression_strategy(::std::string* compression_strategy) {
  if (compression_strategy != NULL) {
    
  } else {
    
  }
  compression_strategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compression_strategy);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraInternalMessage.compression_strategy)
}

// repeated string ids = 7;
inline int CassandraInternalMessage::ids_size() const {
  return ids_.size();
}
inline void CassandraInternalMessage::clear_ids() {
  ids_.Clear();
}
inline const ::std::string& CassandraInternalMessage::ids(int index) const {
  // @@protoc_insertion_point(field_get:structs.CassandraInternalMessage.ids)
  return ids_.Get(index);
}
inline ::std::string* CassandraInternalMessage::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:structs.CassandraInternalMessage.ids)
  return ids_.Mutable(index);
}
inline void CassandraInternalMessage::set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:structs.CassandraInternalMessage.ids)
  ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CassandraInternalMessage::set_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:structs.CassandraInternalMessage.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CassandraInternalMessage::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:structs.CassandraInternalMessage.ids)
}
inline void CassandraInternalMessage::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraInternalMessage.ids)
}
inline ::std::string* CassandraInternalMessage::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:structs.CassandraInternalMessage.ids)
  return ids_.Add();
}
inline void CassandraInternalMessage::add_ids(const ::std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:structs.CassandraInternalMessage.ids)
}
#if LANG_CXX11
inline void CassandraInternalMessage::add_ids(::std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:structs.CassandraInternalMessage.ids)
}
#endif
inline void CassandraInternalMessage::add_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:structs.CassandraInternalMessage.ids)
}
inline void CassandraInternalMessage::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:structs.CassandraInternalMessage.ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CassandraInternalMessage::ids() const {
  // @@protoc_insertion_point(field_list:structs.CassandraInternalMessage.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CassandraInternalMessage::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:structs.CassandraInternalMessage.ids)
  return &ids_;
}

// string java_package = 8;
inline void CassandraInternalMessage::clear_java_package() {
  java_package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraInternalMessage::java_package() const {
  // @@protoc_insertion_point(field_get:structs.CassandraInternalMessage.java_package)
  return java_package_.GetNoArena();
}
inline void CassandraInternalMessage::set_java_package(const ::std::string& value) {
  
  java_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraInternalMessage.java_package)
}
#if LANG_CXX11
inline void CassandraInternalMessage::set_java_package(::std::string&& value) {
  
  java_package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraInternalMessage.java_package)
}
#endif
inline void CassandraInternalMessage::set_java_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  java_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraInternalMessage.java_package)
}
inline void CassandraInternalMessage::set_java_package(const char* value, size_t size) {
  
  java_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraInternalMessage.java_package)
}
inline ::std::string* CassandraInternalMessage::mutable_java_package() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraInternalMessage.java_package)
  return java_package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraInternalMessage::release_java_package() {
  // @@protoc_insertion_point(field_release:structs.CassandraInternalMessage.java_package)
  
  return java_package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraInternalMessage::set_allocated_java_package(::std::string* java_package) {
  if (java_package != NULL) {
    
  } else {
    
  }
  java_package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), java_package);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraInternalMessage.java_package)
}

// string java_class = 9;
inline void CassandraInternalMessage::clear_java_class() {
  java_class_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraInternalMessage::java_class() const {
  // @@protoc_insertion_point(field_get:structs.CassandraInternalMessage.java_class)
  return java_class_.GetNoArena();
}
inline void CassandraInternalMessage::set_java_class(const ::std::string& value) {
  
  java_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraInternalMessage.java_class)
}
#if LANG_CXX11
inline void CassandraInternalMessage::set_java_class(::std::string&& value) {
  
  java_class_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraInternalMessage.java_class)
}
#endif
inline void CassandraInternalMessage::set_java_class(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  java_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraInternalMessage.java_class)
}
inline void CassandraInternalMessage::set_java_class(const char* value, size_t size) {
  
  java_class_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraInternalMessage.java_class)
}
inline ::std::string* CassandraInternalMessage::mutable_java_class() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraInternalMessage.java_class)
  return java_class_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraInternalMessage::release_java_class() {
  // @@protoc_insertion_point(field_release:structs.CassandraInternalMessage.java_class)
  
  return java_class_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraInternalMessage::set_allocated_java_class(::std::string* java_class) {
  if (java_class != NULL) {
    
  } else {
    
  }
  java_class_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), java_class);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraInternalMessage.java_class)
}

// -------------------------------------------------------------------

// CassandraInternalMessages

// repeated .structs.CassandraInternalMessage messages = 1;
inline int CassandraInternalMessages::messages_size() const {
  return messages_.size();
}
inline void CassandraInternalMessages::clear_messages() {
  messages_.Clear();
}
inline const ::structs::CassandraInternalMessage& CassandraInternalMessages::messages(int index) const {
  // @@protoc_insertion_point(field_get:structs.CassandraInternalMessages.messages)
  return messages_.Get(index);
}
inline ::structs::CassandraInternalMessage* CassandraInternalMessages::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:structs.CassandraInternalMessages.messages)
  return messages_.Mutable(index);
}
inline ::structs::CassandraInternalMessage* CassandraInternalMessages::add_messages() {
  // @@protoc_insertion_point(field_add:structs.CassandraInternalMessages.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalMessage >*
CassandraInternalMessages::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:structs.CassandraInternalMessages.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::structs::CassandraInternalMessage >&
CassandraInternalMessages::messages() const {
  // @@protoc_insertion_point(field_list:structs.CassandraInternalMessages.messages)
  return messages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace structs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_structs_2fcassandra_2fcassandra_5finternal_2eproto__INCLUDED
