// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/cassandra/cassandra.proto

#ifndef PROTOBUF_structs_2fcassandra_2fcassandra_2eproto__INCLUDED
#define PROTOBUF_structs_2fcassandra_2fcassandra_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_structs_2fcassandra_2fcassandra_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCassandraFieldImpl();
void InitDefaultsCassandraField();
void InitDefaultsCassandraSchemaImpl();
void InitDefaultsCassandraSchema();
void InitDefaultsCassandraSchemasImpl();
void InitDefaultsCassandraSchemas();
inline void InitDefaults() {
  InitDefaultsCassandraField();
  InitDefaultsCassandraSchema();
  InitDefaultsCassandraSchemas();
}
}  // namespace protobuf_structs_2fcassandra_2fcassandra_2eproto
namespace structs {
class CassandraField;
class CassandraFieldDefaultTypeInternal;
extern CassandraFieldDefaultTypeInternal _CassandraField_default_instance_;
class CassandraSchema;
class CassandraSchemaDefaultTypeInternal;
extern CassandraSchemaDefaultTypeInternal _CassandraSchema_default_instance_;
class CassandraSchemas;
class CassandraSchemasDefaultTypeInternal;
extern CassandraSchemasDefaultTypeInternal _CassandraSchemas_default_instance_;
}  // namespace structs
namespace structs {

enum RepeatedHandler {
  LIST = 0,
  FROZEN_LIST = 1,
  BYTES = 2,
  FROZEN_SET = 3,
  SET = 4,
  RepeatedHandler_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RepeatedHandler_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RepeatedHandler_IsValid(int value);
const RepeatedHandler RepeatedHandler_MIN = LIST;
const RepeatedHandler RepeatedHandler_MAX = SET;
const int RepeatedHandler_ARRAYSIZE = RepeatedHandler_MAX + 1;

const ::google::protobuf::EnumDescriptor* RepeatedHandler_descriptor();
inline const ::std::string& RepeatedHandler_Name(RepeatedHandler value) {
  return ::google::protobuf::internal::NameOfEnum(
    RepeatedHandler_descriptor(), value);
}
inline bool RepeatedHandler_Parse(
    const ::std::string& name, RepeatedHandler* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RepeatedHandler>(
    RepeatedHandler_descriptor(), name, value);
}
// ===================================================================

class CassandraField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:structs.CassandraField) */ {
 public:
  CassandraField();
  virtual ~CassandraField();

  CassandraField(const CassandraField& from);

  inline CassandraField& operator=(const CassandraField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CassandraField(CassandraField&& from) noexcept
    : CassandraField() {
    *this = ::std::move(from);
  }

  inline CassandraField& operator=(CassandraField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CassandraField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CassandraField* internal_default_instance() {
    return reinterpret_cast<const CassandraField*>(
               &_CassandraField_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CassandraField* other);
  friend void swap(CassandraField& a, CassandraField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CassandraField* New() const PROTOBUF_FINAL { return New(NULL); }

  CassandraField* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CassandraField& from);
  void MergeFrom(const CassandraField& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CassandraField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string field_name = 5;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 5;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  #if LANG_CXX11
  void set_field_name(::std::string&& value);
  #endif
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);

  // bool is_id = 2;
  void clear_is_id();
  static const int kIsIdFieldNumber = 2;
  bool is_id() const;
  void set_is_id(bool value);

  // bool is_bytes = 3;
  void clear_is_bytes();
  static const int kIsBytesFieldNumber = 3;
  bool is_bytes() const;
  void set_is_bytes(bool value);

  // bool is_transient = 4;
  void clear_is_transient();
  static const int kIsTransientFieldNumber = 4;
  bool is_transient() const;
  void set_is_transient(bool value);

  // .structs.RepeatedHandler repeated_handling = 6;
  void clear_repeated_handling();
  static const int kRepeatedHandlingFieldNumber = 6;
  ::structs::RepeatedHandler repeated_handling() const;
  void set_repeated_handling(::structs::RepeatedHandler value);

  // int32 id_cardinality = 7;
  void clear_id_cardinality();
  static const int kIdCardinalityFieldNumber = 7;
  ::google::protobuf::int32 id_cardinality() const;
  void set_id_cardinality(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:structs.CassandraField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  bool is_id_;
  bool is_bytes_;
  bool is_transient_;
  int repeated_handling_;
  ::google::protobuf::int32 id_cardinality_;
  mutable int _cached_size_;
  friend struct ::protobuf_structs_2fcassandra_2fcassandra_2eproto::TableStruct;
  friend void ::protobuf_structs_2fcassandra_2fcassandra_2eproto::InitDefaultsCassandraFieldImpl();
};
// -------------------------------------------------------------------

class CassandraSchema : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:structs.CassandraSchema) */ {
 public:
  CassandraSchema();
  virtual ~CassandraSchema();

  CassandraSchema(const CassandraSchema& from);

  inline CassandraSchema& operator=(const CassandraSchema& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CassandraSchema(CassandraSchema&& from) noexcept
    : CassandraSchema() {
    *this = ::std::move(from);
  }

  inline CassandraSchema& operator=(CassandraSchema&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CassandraSchema& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CassandraSchema* internal_default_instance() {
    return reinterpret_cast<const CassandraSchema*>(
               &_CassandraSchema_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CassandraSchema* other);
  friend void swap(CassandraSchema& a, CassandraSchema& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CassandraSchema* New() const PROTOBUF_FINAL { return New(NULL); }

  CassandraSchema* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CassandraSchema& from);
  void MergeFrom(const CassandraSchema& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CassandraSchema* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .structs.CassandraField fields = 3;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 3;
  const ::structs::CassandraField& fields(int index) const;
  ::structs::CassandraField* mutable_fields(int index);
  ::structs::CassandraField* add_fields();
  ::google::protobuf::RepeatedPtrField< ::structs::CassandraField >*
      mutable_fields();
  const ::google::protobuf::RepeatedPtrField< ::structs::CassandraField >&
      fields() const;

  // string message_name = 1;
  void clear_message_name();
  static const int kMessageNameFieldNumber = 1;
  const ::std::string& message_name() const;
  void set_message_name(const ::std::string& value);
  #if LANG_CXX11
  void set_message_name(::std::string&& value);
  #endif
  void set_message_name(const char* value);
  void set_message_name(const char* value, size_t size);
  ::std::string* mutable_message_name();
  ::std::string* release_message_name();
  void set_allocated_message_name(::std::string* message_name);

  // string table_name = 2;
  void clear_table_name();
  static const int kTableNameFieldNumber = 2;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // string compaction_strategy = 4;
  void clear_compaction_strategy();
  static const int kCompactionStrategyFieldNumber = 4;
  const ::std::string& compaction_strategy() const;
  void set_compaction_strategy(const ::std::string& value);
  #if LANG_CXX11
  void set_compaction_strategy(::std::string&& value);
  #endif
  void set_compaction_strategy(const char* value);
  void set_compaction_strategy(const char* value, size_t size);
  ::std::string* mutable_compaction_strategy();
  ::std::string* release_compaction_strategy();
  void set_allocated_compaction_strategy(::std::string* compaction_strategy);

  // string compression_strategy = 5;
  void clear_compression_strategy();
  static const int kCompressionStrategyFieldNumber = 5;
  const ::std::string& compression_strategy() const;
  void set_compression_strategy(const ::std::string& value);
  #if LANG_CXX11
  void set_compression_strategy(::std::string&& value);
  #endif
  void set_compression_strategy(const char* value);
  void set_compression_strategy(const char* value, size_t size);
  ::std::string* mutable_compression_strategy();
  ::std::string* release_compression_strategy();
  void set_allocated_compression_strategy(::std::string* compression_strategy);

  // string java_package = 6;
  void clear_java_package();
  static const int kJavaPackageFieldNumber = 6;
  const ::std::string& java_package() const;
  void set_java_package(const ::std::string& value);
  #if LANG_CXX11
  void set_java_package(::std::string&& value);
  #endif
  void set_java_package(const char* value);
  void set_java_package(const char* value, size_t size);
  ::std::string* mutable_java_package();
  ::std::string* release_java_package();
  void set_allocated_java_package(::std::string* java_package);

  // @@protoc_insertion_point(class_scope:structs.CassandraSchema)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::structs::CassandraField > fields_;
  ::google::protobuf::internal::ArenaStringPtr message_name_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::internal::ArenaStringPtr compaction_strategy_;
  ::google::protobuf::internal::ArenaStringPtr compression_strategy_;
  ::google::protobuf::internal::ArenaStringPtr java_package_;
  mutable int _cached_size_;
  friend struct ::protobuf_structs_2fcassandra_2fcassandra_2eproto::TableStruct;
  friend void ::protobuf_structs_2fcassandra_2fcassandra_2eproto::InitDefaultsCassandraSchemaImpl();
};
// -------------------------------------------------------------------

class CassandraSchemas : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:structs.CassandraSchemas) */ {
 public:
  CassandraSchemas();
  virtual ~CassandraSchemas();

  CassandraSchemas(const CassandraSchemas& from);

  inline CassandraSchemas& operator=(const CassandraSchemas& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CassandraSchemas(CassandraSchemas&& from) noexcept
    : CassandraSchemas() {
    *this = ::std::move(from);
  }

  inline CassandraSchemas& operator=(CassandraSchemas&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CassandraSchemas& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CassandraSchemas* internal_default_instance() {
    return reinterpret_cast<const CassandraSchemas*>(
               &_CassandraSchemas_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CassandraSchemas* other);
  friend void swap(CassandraSchemas& a, CassandraSchemas& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CassandraSchemas* New() const PROTOBUF_FINAL { return New(NULL); }

  CassandraSchemas* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CassandraSchemas& from);
  void MergeFrom(const CassandraSchemas& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CassandraSchemas* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .structs.CassandraSchema schema = 1;
  int schema_size() const;
  void clear_schema();
  static const int kSchemaFieldNumber = 1;
  const ::structs::CassandraSchema& schema(int index) const;
  ::structs::CassandraSchema* mutable_schema(int index);
  ::structs::CassandraSchema* add_schema();
  ::google::protobuf::RepeatedPtrField< ::structs::CassandraSchema >*
      mutable_schema();
  const ::google::protobuf::RepeatedPtrField< ::structs::CassandraSchema >&
      schema() const;

  // @@protoc_insertion_point(class_scope:structs.CassandraSchemas)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::structs::CassandraSchema > schema_;
  mutable int _cached_size_;
  friend struct ::protobuf_structs_2fcassandra_2fcassandra_2eproto::TableStruct;
  friend void ::protobuf_structs_2fcassandra_2fcassandra_2eproto::InitDefaultsCassandraSchemasImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CassandraField

// string path = 1;
inline void CassandraField::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraField::path() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.path)
  return path_.GetNoArena();
}
inline void CassandraField::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraField.path)
}
#if LANG_CXX11
inline void CassandraField::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraField.path)
}
#endif
inline void CassandraField::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraField.path)
}
inline void CassandraField::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraField.path)
}
inline ::std::string* CassandraField::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraField.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraField::release_path() {
  // @@protoc_insertion_point(field_release:structs.CassandraField.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraField::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraField.path)
}

// bool is_id = 2;
inline void CassandraField::clear_is_id() {
  is_id_ = false;
}
inline bool CassandraField::is_id() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.is_id)
  return is_id_;
}
inline void CassandraField::set_is_id(bool value) {
  
  is_id_ = value;
  // @@protoc_insertion_point(field_set:structs.CassandraField.is_id)
}

// int32 id_cardinality = 7;
inline void CassandraField::clear_id_cardinality() {
  id_cardinality_ = 0;
}
inline ::google::protobuf::int32 CassandraField::id_cardinality() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.id_cardinality)
  return id_cardinality_;
}
inline void CassandraField::set_id_cardinality(::google::protobuf::int32 value) {
  
  id_cardinality_ = value;
  // @@protoc_insertion_point(field_set:structs.CassandraField.id_cardinality)
}

// bool is_bytes = 3;
inline void CassandraField::clear_is_bytes() {
  is_bytes_ = false;
}
inline bool CassandraField::is_bytes() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.is_bytes)
  return is_bytes_;
}
inline void CassandraField::set_is_bytes(bool value) {
  
  is_bytes_ = value;
  // @@protoc_insertion_point(field_set:structs.CassandraField.is_bytes)
}

// bool is_transient = 4;
inline void CassandraField::clear_is_transient() {
  is_transient_ = false;
}
inline bool CassandraField::is_transient() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.is_transient)
  return is_transient_;
}
inline void CassandraField::set_is_transient(bool value) {
  
  is_transient_ = value;
  // @@protoc_insertion_point(field_set:structs.CassandraField.is_transient)
}

// string field_name = 5;
inline void CassandraField::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraField::field_name() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.field_name)
  return field_name_.GetNoArena();
}
inline void CassandraField::set_field_name(const ::std::string& value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraField.field_name)
}
#if LANG_CXX11
inline void CassandraField::set_field_name(::std::string&& value) {
  
  field_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraField.field_name)
}
#endif
inline void CassandraField::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraField.field_name)
}
inline void CassandraField::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraField.field_name)
}
inline ::std::string* CassandraField::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraField.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraField::release_field_name() {
  // @@protoc_insertion_point(field_release:structs.CassandraField.field_name)
  
  return field_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraField::set_allocated_field_name(::std::string* field_name) {
  if (field_name != NULL) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraField.field_name)
}

// .structs.RepeatedHandler repeated_handling = 6;
inline void CassandraField::clear_repeated_handling() {
  repeated_handling_ = 0;
}
inline ::structs::RepeatedHandler CassandraField::repeated_handling() const {
  // @@protoc_insertion_point(field_get:structs.CassandraField.repeated_handling)
  return static_cast< ::structs::RepeatedHandler >(repeated_handling_);
}
inline void CassandraField::set_repeated_handling(::structs::RepeatedHandler value) {
  
  repeated_handling_ = value;
  // @@protoc_insertion_point(field_set:structs.CassandraField.repeated_handling)
}

// -------------------------------------------------------------------

// CassandraSchema

// string message_name = 1;
inline void CassandraSchema::clear_message_name() {
  message_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraSchema::message_name() const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchema.message_name)
  return message_name_.GetNoArena();
}
inline void CassandraSchema::set_message_name(const ::std::string& value) {
  
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraSchema.message_name)
}
#if LANG_CXX11
inline void CassandraSchema::set_message_name(::std::string&& value) {
  
  message_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraSchema.message_name)
}
#endif
inline void CassandraSchema::set_message_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraSchema.message_name)
}
inline void CassandraSchema::set_message_name(const char* value, size_t size) {
  
  message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraSchema.message_name)
}
inline ::std::string* CassandraSchema::mutable_message_name() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchema.message_name)
  return message_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraSchema::release_message_name() {
  // @@protoc_insertion_point(field_release:structs.CassandraSchema.message_name)
  
  return message_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraSchema::set_allocated_message_name(::std::string* message_name) {
  if (message_name != NULL) {
    
  } else {
    
  }
  message_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_name);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraSchema.message_name)
}

// string table_name = 2;
inline void CassandraSchema::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraSchema::table_name() const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchema.table_name)
  return table_name_.GetNoArena();
}
inline void CassandraSchema::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraSchema.table_name)
}
#if LANG_CXX11
inline void CassandraSchema::set_table_name(::std::string&& value) {
  
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraSchema.table_name)
}
#endif
inline void CassandraSchema::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraSchema.table_name)
}
inline void CassandraSchema::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraSchema.table_name)
}
inline ::std::string* CassandraSchema::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchema.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraSchema::release_table_name() {
  // @@protoc_insertion_point(field_release:structs.CassandraSchema.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraSchema::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraSchema.table_name)
}

// repeated .structs.CassandraField fields = 3;
inline int CassandraSchema::fields_size() const {
  return fields_.size();
}
inline void CassandraSchema::clear_fields() {
  fields_.Clear();
}
inline const ::structs::CassandraField& CassandraSchema::fields(int index) const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchema.fields)
  return fields_.Get(index);
}
inline ::structs::CassandraField* CassandraSchema::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchema.fields)
  return fields_.Mutable(index);
}
inline ::structs::CassandraField* CassandraSchema::add_fields() {
  // @@protoc_insertion_point(field_add:structs.CassandraSchema.fields)
  return fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::structs::CassandraField >*
CassandraSchema::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:structs.CassandraSchema.fields)
  return &fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::structs::CassandraField >&
CassandraSchema::fields() const {
  // @@protoc_insertion_point(field_list:structs.CassandraSchema.fields)
  return fields_;
}

// string compaction_strategy = 4;
inline void CassandraSchema::clear_compaction_strategy() {
  compaction_strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraSchema::compaction_strategy() const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchema.compaction_strategy)
  return compaction_strategy_.GetNoArena();
}
inline void CassandraSchema::set_compaction_strategy(const ::std::string& value) {
  
  compaction_strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraSchema.compaction_strategy)
}
#if LANG_CXX11
inline void CassandraSchema::set_compaction_strategy(::std::string&& value) {
  
  compaction_strategy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraSchema.compaction_strategy)
}
#endif
inline void CassandraSchema::set_compaction_strategy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compaction_strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraSchema.compaction_strategy)
}
inline void CassandraSchema::set_compaction_strategy(const char* value, size_t size) {
  
  compaction_strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraSchema.compaction_strategy)
}
inline ::std::string* CassandraSchema::mutable_compaction_strategy() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchema.compaction_strategy)
  return compaction_strategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraSchema::release_compaction_strategy() {
  // @@protoc_insertion_point(field_release:structs.CassandraSchema.compaction_strategy)
  
  return compaction_strategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraSchema::set_allocated_compaction_strategy(::std::string* compaction_strategy) {
  if (compaction_strategy != NULL) {
    
  } else {
    
  }
  compaction_strategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compaction_strategy);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraSchema.compaction_strategy)
}

// string compression_strategy = 5;
inline void CassandraSchema::clear_compression_strategy() {
  compression_strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraSchema::compression_strategy() const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchema.compression_strategy)
  return compression_strategy_.GetNoArena();
}
inline void CassandraSchema::set_compression_strategy(const ::std::string& value) {
  
  compression_strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraSchema.compression_strategy)
}
#if LANG_CXX11
inline void CassandraSchema::set_compression_strategy(::std::string&& value) {
  
  compression_strategy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraSchema.compression_strategy)
}
#endif
inline void CassandraSchema::set_compression_strategy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compression_strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraSchema.compression_strategy)
}
inline void CassandraSchema::set_compression_strategy(const char* value, size_t size) {
  
  compression_strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraSchema.compression_strategy)
}
inline ::std::string* CassandraSchema::mutable_compression_strategy() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchema.compression_strategy)
  return compression_strategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraSchema::release_compression_strategy() {
  // @@protoc_insertion_point(field_release:structs.CassandraSchema.compression_strategy)
  
  return compression_strategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraSchema::set_allocated_compression_strategy(::std::string* compression_strategy) {
  if (compression_strategy != NULL) {
    
  } else {
    
  }
  compression_strategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compression_strategy);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraSchema.compression_strategy)
}

// string java_package = 6;
inline void CassandraSchema::clear_java_package() {
  java_package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CassandraSchema::java_package() const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchema.java_package)
  return java_package_.GetNoArena();
}
inline void CassandraSchema::set_java_package(const ::std::string& value) {
  
  java_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:structs.CassandraSchema.java_package)
}
#if LANG_CXX11
inline void CassandraSchema::set_java_package(::std::string&& value) {
  
  java_package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:structs.CassandraSchema.java_package)
}
#endif
inline void CassandraSchema::set_java_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  java_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:structs.CassandraSchema.java_package)
}
inline void CassandraSchema::set_java_package(const char* value, size_t size) {
  
  java_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:structs.CassandraSchema.java_package)
}
inline ::std::string* CassandraSchema::mutable_java_package() {
  
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchema.java_package)
  return java_package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CassandraSchema::release_java_package() {
  // @@protoc_insertion_point(field_release:structs.CassandraSchema.java_package)
  
  return java_package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CassandraSchema::set_allocated_java_package(::std::string* java_package) {
  if (java_package != NULL) {
    
  } else {
    
  }
  java_package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), java_package);
  // @@protoc_insertion_point(field_set_allocated:structs.CassandraSchema.java_package)
}

// -------------------------------------------------------------------

// CassandraSchemas

// repeated .structs.CassandraSchema schema = 1;
inline int CassandraSchemas::schema_size() const {
  return schema_.size();
}
inline void CassandraSchemas::clear_schema() {
  schema_.Clear();
}
inline const ::structs::CassandraSchema& CassandraSchemas::schema(int index) const {
  // @@protoc_insertion_point(field_get:structs.CassandraSchemas.schema)
  return schema_.Get(index);
}
inline ::structs::CassandraSchema* CassandraSchemas::mutable_schema(int index) {
  // @@protoc_insertion_point(field_mutable:structs.CassandraSchemas.schema)
  return schema_.Mutable(index);
}
inline ::structs::CassandraSchema* CassandraSchemas::add_schema() {
  // @@protoc_insertion_point(field_add:structs.CassandraSchemas.schema)
  return schema_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::structs::CassandraSchema >*
CassandraSchemas::mutable_schema() {
  // @@protoc_insertion_point(field_mutable_list:structs.CassandraSchemas.schema)
  return &schema_;
}
inline const ::google::protobuf::RepeatedPtrField< ::structs::CassandraSchema >&
CassandraSchemas::schema() const {
  // @@protoc_insertion_point(field_list:structs.CassandraSchemas.schema)
  return schema_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace structs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::structs::RepeatedHandler> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structs::RepeatedHandler>() {
  return ::structs::RepeatedHandler_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_structs_2fcassandra_2fcassandra_2eproto__INCLUDED
